RADI UNUTAR SOLUTION EXPLORERA! -Back
RADI UNUTAR DATEAPP! - Front
Od angular 16 verzije, nemamo vise app module, vec sve komponente kreiramo kao standalone
Ako se niko ne subscribuje na observable (tok podataka), nista se nece desiti


komande za kreiranje .NET apk:
dotnet new sln  	--pravimo novi solution
dotnet new webapi -controllers - API      --API je ime
dotnet sln add API 	--dodajemo u solution 

Koristimo SQLite kao bazu i ekstenziju u VS code (ne koristi se za produkciju ali je odlican za programiranje)
Ne treba nam database server, vec koristi fajl da smesti nasu bazu, ali kasnije cemo videti kako da to postavimo za produkciju sa pravom bazom

appsettings.Development.json
"ConnectionStrings": {
    "DefaultConnection": "Data source=dating.db"
  }
Program.cs
    opt.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection"));

Koristimo SQLite jer je cross-platform a SQL Server nije

Ubacivanje entity framework-a:
dotnet tool install --global dotnet-ef --version 8.0.12

Komande za migraciju i kreiranje baze
dotnet ef migrations add Ime
dotnet ef database update

Nakon toga u Search idemo >Sqlite Open DataBase , pa prvo sto izadje, 
nakon toga u explorer-u ce se pojaviti SQLITE EXPLORER i tu su nam je baza

Koristimo mkcert, da bi napravili sertifikat da moze nasa aplikacija da radi i na https adresi, a i da bi izbegli upozorenja da nasa stranica nije bezbedna, ovaj sertifikat obezbedjuje da podaci od klijenta do servera stignu bezbedno 

Koncept inherencije (ne ponavljanje koda) -> to resavamo tako sto pravimo Base API kontroler

Ako hocemo da testiramo imamo sa leve strane debugger, napravimo fajl koji trazi i dodamo prve 2 konfiguracije u tom fajlu,
Zatim idemo na RUN AND SET DEBUG => .NET Core Attach

Kako funkcionise JWT:
1.Korisnik salje serveru username i pass
2.server validira podatke i vraca klijentu JWT token, koji klijent cuva lokalno 
3.clijent salje jwt serveru jwt token sa svakim pojendinacnim zahtevom
4. server proverava da li je jwt token validan i vraca korisniku odgovor
Zakljucak: svaki put kad hocemo da pristupimo necemu sto je zasticeno atorizacijom, saljemo JWT token sa tim zahtevom, i server proverava da li je token validan i vraca odgovor
Token je oznacen sa secret key, on se nalazi u appsettings,
mora da se oznaci symetric ili asymetric key
Token je iznace i sa claim (nesto sto korisnik tvrdi o sebi (moje ime je to i to, moj rodjendan je tad i tad...))

Servisi u #C - kreiramo interfejs koji predstavlja apstrakciju toga sta ce servis raditi, bez definisanja kako to radi, i nas servis implementira taj interfejs sa definisanjem toga sta radi metoda iz interfejsa

Kada se korisnik registruje i loguje ne treba da mu vracamo passwordsalt passwordHash i username, vec samo username i token
Kada injectujemo u kontroler, injectujemo interfejs a ne sam servis

Sada hocu da testiram da li radi autentifikacija (section 4 u postman, get user with bearer token),
Login ujemo se kao bob npr, i onda posaljemo u header Bearer <token> na putanji https://localhost:5001/api/users/1 i vratice nam boba, sto znaci da je authentifikovan (prijavljen i moze da pristupi toj metodi, a metodu u kontroleru getUser:id smo inace oznacili kao [Authorisation], sto znaci da samo authentifikovan korisnik moze da pristupi )

Ne zelimo da nam konfiguracija cela jwtTokena i ostalih stvari bude implementirana u program.cs
Svi ovi servisi u program.cs su ekstenzije, pa pravimo folder extensions u API i kazemo da je klasa static, 
static znaci da mozemo da koristimo metode te klase bez kreiranja novih instanci !
Cilj je da prosirimo IServiceCollection u kojoj se nalaze inace sve one metode: addCors, addScoped, addAuthentication..

Signali u angularu mogu sadrzati bilo koju vrednost, od jednostavnih tipova do slozenih struktura,
signali su ustvari geteri koji obavestavaju komponenete kada dodje do promene vrednsoti 
Imamo 2 metode nad signalima , set i update.
Koristi se za sinhrone stvari, dok se observables koriste za asinhrone stvari 

Koristimo angular signal, da smestimo nas korisnicki objekat
Da bi smo resili problem osvezavanja stranice (da se ne izloguje korisnik kada se refreshuje), koristimo signale.
Kad se korisnik prijavi, cuva se u local storage, kada se odjavi brise se iz local storage

Imamo Home komponentu koja je parent i register komponentu koja je child, komunikacija se vrsi tako sto roditelj koji salje, ima Output dekorator, a register koja prima ima input, saljemo usere koje smo dobili iz baze u register komponentu
Roditelj koji salje, ima uglaste zagrade i properti iz child-a
Kad kliknemo na cancel, register (child) komponenta treba da posalje parent komponenti rezultat, da se forma ugasi 

Rute definisemo u Route komponenti (koju je angular definisao) i gde koristimo u toj komponenti ide: routerLink=""

Toastr sluzi da prikazemo greske korisniku

Moramo zastitit rute, jer npr samo registrovan korisnik moze videti nav bar itd, ali nepoznati korisnik moze ukucati https://localhost/members i da vidi sta je tu,
napravimo guard i u routes imamo canActivate

Welcome {{accountService.currentUser()?.username | titlecase}} - inicijalno vraca malo slovo ako je tako bilo u bazi, ovo ga vraca u veliko







izvor: https://dualsoft.udemy.com/course/build-an-app-with-aspnet-core-and-angular-from-scratch/learn/lecture/44314878#overview